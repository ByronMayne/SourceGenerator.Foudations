<?xml version="1.0" encoding="utf-8" ?>
<!-- == Local Development Reference == 
  Import this project file into a project locally on your machine to simulate the same settings as if 
  you referenced a nuget packages. This allows you to do rapid development without having to publish
  and clear a locally created nuget package.
-->
<Project>
  <ItemGroup>
    <ProjectReference Include="$(MSBuildThisFileDirectory)SourceGenerator.Foundations.Contracts/SourceGenerator.Foundations.Contracts.csproj" />
    <ProjectReference Include="$(MSBuildThisFileDirectory)SourceGenerator.Foundations/SourceGenerator.Foundations.csproj" ReferenceOutputAssembly="false" OutputItemType="Analyzer" />
  </ItemGroup>
  <Import Project="$(MSBuildThisFileDirectory)SourceGenerator.Foundations/SourceGenerator.Foundations.props" />
  <!-- ==== Copy Plugin Assemblies to Resources ===
    We inject for example 'SourceGenerator.Foundations.Windows' into the assembly that is referencing this file. This is 
    done because we need to resolve this assembly at runtime. You would assembly that the better place to put this would be
    as a resource of `SourceGenerator.Foundations.Contracts` however since the plugin assemblies also refernece this, we end
    up with circular dependencies. We could resolve this by doing IL editing with Cecil but that is making this already complex
    project more complex. So instead we put them in our target assembly.
  -->
  <Target Name="SGFLocal_PackagePlugins" BeforeTargets="SGF_EmbedDependencies">
    <ItemGroup>
      <__pluginProjectName Include="SourceGenerator.Foundations.Windows"/>
      <SGF_EmbeddedAssembly Include="@(__pluginProjectName->'$(MSBuildThisFileDirectory)/Plugins/%(Identity)/bin/$(Configuration)//netstandard2.0/%(Identity).dll')" />
    </ItemGroup>
    <Message Importance="high" Text="Importing: $(AssemblyName) @(SGF_EmbeddedAssembly)"/>
  </Target>
</Project>