using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;

namespace ConsoleApp.SourceGenerator.Tests
{
    public class TestCase
    {
        [Fact]
        public void Compiles()
        {
            Compose("""
                namespace MyNamespace
                {
                    public class MyClass
                    {
                    }
                }
                """);
        }


        private void Compose(string source)
        {
            // Create the generator, you can pass any parameters you want
            ConsoleAppSourceGenerator generator = new ConsoleAppSourceGenerator()
            {
                WarningMessage = "I am running from a unit test!" // Change any settings you want
            };
            // Create the 'host' which is the wrapper that is auto generated by SGF. 
            ConsoleAppSourceGeneratorHoist host = new ConsoleAppSourceGeneratorHoist(generator);
            // Parse the source into syntax trees
            SyntaxTree syntaxTree = CSharpSyntaxTree.ParseText(source);
            // Setup the compilation settings
            CSharpCompilation compilation = CSharpCompilation.Create(
              assemblyName: "UniTests",
              syntaxTrees: new[] { syntaxTree });
            // Create the driver the executes the generator
            GeneratorDriver driver = CSharpGeneratorDriver.Create(host);
            // Run it 
            driver = driver.RunGenerators(compilation);
            // Get the results
            GeneratorDriverRunResult results = driver.GetRunResult();
            // Test the results
            Assert.NotEmpty(results.GeneratedTrees);
        }
    }
}