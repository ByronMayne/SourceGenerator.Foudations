using EnvDTE;
using EnvDTE80;
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using {{RootNamespace}}.Interop;

namespace {{RootNamespace}}
{
    internal class OutputChannel
    {
        private static readonly string s_outputPaneName;
        private static OutputChannel? s_instance;
        private readonly OutputWindowPane? m_outputPane;

        /// <summary>
        /// Gets the instance of the output helper
        /// </summary>
        public static OutputChannel Instance
        {
            get
            {
                if (s_instance == null)
                {
                    s_instance = Create();
                }
                return s_instance!;
            }
        }

        static OutputChannel()
        {
            Type type = typeof(OutputChannel);
            Assembly assembly = type.Assembly;
            AssemblyName assemblyName = assembly.GetName();
            s_outputPaneName = assemblyName.Name;
        }

        public void Log(string message)
        {
            if (m_outputPane != null)
            {
                m_outputPane.OutputString(message);
            }
        }

        private OutputChannel(OutputWindowPane? windowPane)
        {
            m_outputPane = windowPane;
        }

        private static OutputChannel? Create()
        {
            DTE? dte = VisualStudioEnv.GetDTE();
            if (dte == null)
            {
                return null;
            }

            Window window = dte.Windows.Item(Constants.vsWindowKindOutput);
            OutputWindowPane? windowPane = null;

            if (window.Object is OutputWindow outputWindow)
            {
                foreach (OutputWindowPane pane in outputWindow.OutputWindowPanes)
                {
                    if (Equals(pane.Name, s_outputPaneName))
                    {
                        windowPane = pane;
                        break;
                    }
                }
                windowPane ??= outputWindow.OutputWindowPanes.Add(s_outputPaneName);
            }
            if (windowPane != null)
            {
                windowPane.Clear();
            }
            return new OutputChannel(windowPane);
        }
    }
}
