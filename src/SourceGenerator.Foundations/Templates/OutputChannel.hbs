using EnvDTE;
using EnvDTE80;
using System;
using System.Reflection;
using System.Collections.Generic;
using System.Text;
using {{RootNamespace}}.Interop;

namespace {{RootNamespace}}
{
    public class OutputChannel
    {
        private static readonly OutputWindow? s_outputWindow;
        private OutputWindowPane? m_outputPane;

        static OutputChannel()
        {
            DTE? dte = VisualStudioEnv.GetDTE();
            if (dte != null)
            {
                Window window = dte.Windows.Item(Constants.vsWindowKindOutput);
                s_outputWindow = window.Object as OutputWindow;
            }
        }

        /// <summary>
        /// Initializes a new instance of an output channel with the
        /// Visual Studio output window. 
        /// </summary>
        internal OutputChannel(string channelName)
        {
            if (s_outputWindow != null)
            {
                foreach (OutputWindowPane pane in s_outputWindow.OutputWindowPanes)
                {
                    if (Equals(pane.Name, channelName))
                    {
                        m_outputPane = pane;
                        break;
                    }
                }
                m_outputPane ??= s_outputWindow.OutputWindowPanes.Add(channelName);
            }
        }

       /// <summary>
       /// Clears the output window of all entries
       /// </summary>
       public void Clear()
       {
            if (m_outputPane != null)
            {
                m_outputPane.Clear();
            }
       }

       /// <summary>
       /// Writes an entry to the output window if it has been initialized
       /// </summary>
       public void Write(string message)
       {
            if (m_outputPane != null)
            {
                m_outputPane.OutputString(message);
            }
        }

       /// <summary>
       /// Writes an entry to the output window if it has been initialized
       /// </summary>
       public void WriteLine(string message)
       {
            if (m_outputPane != null)
            {
                m_outputPane.OutputString($"{message}{System.Environment.NewLine}");
            }
        }
    }
}
